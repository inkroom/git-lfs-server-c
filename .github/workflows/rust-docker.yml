name: rust

on:
  push:
    tags: 
      - 'v*'
    paths-ignore:
      - 'README.md'
  workflow_dispatch:
jobs:
  windows:
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with: 
          ref: 'rust'
      - name: Version
        id: v
        run: |
          echo "ve=${GITHUB_REF_NAME:1}" >> $GITHUB_OUTPUT
      - name: Rust
        uses: actions-rs/toolchain@v1
        with:
            toolchain: 1.67.1
            override: true
      - uses: lukka/get-cmake@latest
      - name: setup vcpkg
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgGitCommitId: 'a7b6122f6b6504d16d96117336a0562693579933'
      - name: Cache Openssl
        id: cache-openssl
        uses: actions/cache@v3
        with:
          path: C:\vcpkg
          key: ${{ runner.os }}-openssl-static
      - name: Install Openssl
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          vcpkg install openssl:x64-windows-static
      - name: Enviornment
        run: |
          set OPENSSL_DIR='C:\vcpkg\packages\openssl_x64-windows-static'

          set OPENSSL_INCLUDE_DIR="C:\vcpkg\packages\openssl_x64-windows-static\include"

          set OPENSSL_LIB_DIR="C:\vcpkg\packages\openssl_x64-windows-static\lib"

          set OPENSSL_STATIC='Yes'

          set OPENSSL_NO_VENDOR=1
      - name: Build Dyn
        run: | 
          mkdir bin
          cargo build --release --all-features
          cp target/release/server.exe bin/server-dyn-all.exe
          cargo clean
          cargo build --release
          cp target/release/server.exe bin/server-dyn-mini.exe
      - name: Release
        uses: ncipollo/release-action@v1
        with:
            artifacts: "bin/*"
            token: ${{ secrets.GITHUB_TOKEN }}
            draft: true
            allowUpdates: true
  linux:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    needs: [windows]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with: 
          ref: 'rust'
      - name: Version
        id: v
        run: |
          echo "ve=${GITHUB_REF_NAME:1}" >> $GITHUB_OUTPUT
      - name: Rust
        uses: actions-rs/toolchain@v1
        with:
            toolchain: 1.67.1
            override: true
      - name: Build Dyn
        run: | 
          mkdir bin
          cargo build --release --all-features
          cp target/release/server bin/server-dyn-all
          cargo clean
          cargo build --release
          cp target/release/server bin/server-dyn-mini
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/lfs-server
          tags: |
            type=raw,value=latest,enable=true
            type=sha,prefix=rust-sha-
            type=raw,value=rust-latest,enable=true
            type=raw,value=${{ steps.v.outputs.ve }}-mini
          labels: |
            org.opencontainers.image.description=rust版本的git-lfs-server
            org.opencontainers.image.title=git-lfs-server-rust
      - name: Extract metadata (tags, labels) for Docker All Features
        id: all
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/lfs-server
          tags: |
            type=sha,prefix=rust-all-sha-
            type=raw,value=rust-all-latest,enable=true
            type=raw,value=${{ steps.v.outputs.ve }}-all
          labels: |
            org.opencontainers.image.description=rust版本的git-lfs-server,启用所有功能
            org.opencontainers.image.title=git-lfs-server-rust-all
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build All Features Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ steps.all.outputs.tags }}
          labels: ${{ steps.all.outputs.labels }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          build-args: |
            CARGO_FEATURES=--all-features
      - name: Extract Docker Image
        id: ex
        run: |
          mkdir all 
          mkdir mini
          cd all
          docker save -o all.tar ghcr.io/inkroom/lfs-server:rust-all-latest
          tar xvf all.tar
          echo "layer:$(sed 's/"]}/\n/g' manifest.json | sed 's/\["/\n/g' | sed -n "3,3p")"
          cat manifest.json
          tar xvf $(sed 's/"]}/\n/g' manifest.json | sed 's/\["/\n/g' | sed -n "3,3p")
          cp server ../bin/server-all
          cd ../mini
          docker save -o mini.tar ghcr.io/inkroom/lfs-server:latest
          tar xvf mini.tar
          cat manifest.json
          echo "layer:$(sed 's/"]}/\n/g' manifest.json | sed 's/\["/\n/g' | sed -n "3,3p")"
          tar xvf $(sed 's/"]}/\n/g' manifest.json | sed 's/\["/\n/g' | sed -n "3,3p")
          cp server ../bin/server-mini
      - name: Release
        uses: ncipollo/release-action@v1
        with:
            artifacts: "bin/*"
            token: ${{ secrets.GITHUB_TOKEN }}
            draft: false
            allowUpdates: true
      - name: Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Push All Features Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.all.outputs.tags }}
          labels: ${{ steps.all.outputs.labels }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          build-args: |
            CARGO_FEATURES=--all-features
